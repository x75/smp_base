#+TITLE: Sensorimotor primitives basic library
#+AUTHOR: Oswald Berthold

#+OPTIONS: toc:nil ^:nil

* Sensorimotor primitives basic library

This tries to be the library of basic functions for a set of
sensorimotor learning experiments with simulators and real robots in
my thesis project /Robotic self-exploration and acquisition of
sensorimotor primitives/. The basic idea there is to have states that
combine sensors with actions and motor signals and learn predictive
models from incoming data to infer future actions from the
approximated sensorimotor dynamics.

This repository is in an early stages of release which I push on the
occasion of sharing the smp_sphero code [fn:1]. Still performing
incremental clean-up and refactoring plus additions from existing
other repositories so a lot of things might still change.

** Dependencies

The main dependencies are the standard ones such as numpy, scipy,
matplotlib, and sklearn which are needed regardless. You can either
install them via package manager

: apt-get install python-numpy python-scipy python-matplotlib python-sklearn

Ultimately optional but recommended modules are rlspy for a recursive least
squares implementation and jpype, a java to python bridge

Clone rlspy from https://github.com/bluesquall/rlspy somewhere into your filesystem and

: pip3 install .

from within the rlspy directory or set the RLSPY variable in ~smp_base/config.py~.

Get jpype with ~sudo apt install python3-jpype~ or ~sudo pip3 install jpype1~.

This is needed for computing information theoretic measures with the
Java Information Dynamics Toolkit available from
https://github.com/jlizier/jidt. Download the latest distribution zip
from there, unpack it and set the JARLOC variable in
~smp_base/config.py~ to point to the infodynamics.jar

Additional packages we depend on at various places are pandas, ros,
pyunicorn, mdp, Oger, pyemd, IncSfa and igmm, but they can be installed
later. Pandas and MDP can be had from the distro with

: apt-get install python-pandas python-mdp

For installing a basic ROS stack see the wiki at
https://www.ros.org/wiki, you need to have the package
python-rospy (Recently I have been building a minimal py3 version of
ROS from source).

Pyunicorn is used for recurrence analysis and can be obtained from source at
https://github.com/pik-copan/pyunicorn or via pip.

Oger is an extension for MDP and can be obtained from
http://reservoir-computing.org/installing_oger.

** Configuration

In a freshly cloned repository a local configuration file has to be created from a template. To do this

: cp smp_base/config.py.dist smp_base/config.py

and then edit the file ~smp_base/config.py~ and set the JARLOC and RLSPY variables to matching values.

** Reservoir lib                                                   :noexport:

|----------------+-------------------------------------------------------------------------------------------|
| reservoirs.py  | contains Reservoir class, LearningRules class, a  few utility functions and a main method |
|                | that demonstrates basic use of the class. It can definitely be simplified (WiP)           |
| learners.py    | this model embeds the underlying adaptive model into the sensorimotor context             |
| eligibility.py | basic eligibility windows used in a variant of learning rules                             |
| smp\_thread.py | thread wrapper that provides constant dt run loop and asynchronous sensor callbacks       |

You could try and run 

: python reservoirs.py

or

: python reservoirs.py --help

to see possible options. Documentation and examples upcoming.

* Footnotes

[fn:5] https://github.com/x75/igmm/tree/smp

[fn:1] https://github.com/x75/smp_sphero
